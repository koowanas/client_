{"version":3,"sources":["DUMMY_NOTES.ts","components/Note/Note.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DUMMY_NOTES","_id","text","link","Note","note","onNoteUpdate","className","onBlur","event","newTextValue","currentTarget","textContent","console","log","updatedNoteObject","contentEditable","suppressContentEditableWarning","href","App","useState","notesList","setNotesList","useEffect","listFromStorageString","localStorage","getItem","listFromStorageArray","JSON","parse","notesListString","stringify","setItem","updateNoteItem","updatedNote","updateList","map","noteItem","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yNAeeA,G,MAbc,CAC3B,CAAEC,IAAK,IAAIC,KAAM,iBAAkBC,KAAM,mCACzC,CAAEF,IAAK,IAAIC,KAAM,YAAaC,KAAM,oBACpC,CAAEF,IAAK,IAAIC,KAAM,iBAAkBC,KAAM,mCACzC,CAAEF,IAAK,IAAIC,KAAM,YAAaC,KAAM,oBACpC,CAAEF,IAAK,IAAIC,KAAM,iBAAkBC,KAAM,mCACzC,CAAEF,IAAK,IAAIC,KAAM,YAAaC,KAAM,oBACpC,CAAEF,IAAK,IAAIC,KAAM,iBAAkBC,KAAM,mCACzC,CAAEF,IAAK,IAAIC,KAAM,YAAaC,KAAM,oBACpC,CAAEF,IAAK,IAAIC,KAAM,iBAAkBC,KAAM,mCACzC,CAAEF,IAAK,KAAKC,KAAM,YAAaC,KAAM,sB,sBC6BxBC,EAhCS,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,aAe/B,OACE,sBAAKC,UAAU,OAAf,UACI,qBACAC,OAhBkB,SAACC,GACvB,IAAMC,EAAeD,EAAME,cAAcC,YACzC,GAAIF,IAAiBL,EAAKH,KAA1B,CAGAW,QAAQC,IAAI,qBACZ,IAAMC,EAAwB,2BACzBV,GADyB,IAE5BH,KAAMQ,GAAgB,KAExBJ,EAAaS,KAOTC,iBAAiB,EACjBC,gCAAgC,EAChCV,UAAU,aAJV,SAMCF,EAAKH,OAER,qBAAKK,UAAU,aAAf,SACM,mBAAGW,KAAMb,EAAKF,KAAd,SAAqBE,EAAKF,aCgCvBgB,MA5Df,WACE,MAAkCC,mBAAqB,IAAvD,mBAAOC,EAAP,KAAkBC,EAAlB,KAGAC,qBAAU,WACR,IAAMC,EAAwBC,aAAaC,QAAQ,WACnD,GAAIF,EAAuB,CACzB,IAAMG,EAAuBC,KAAKC,MAAML,GACxCF,EAAaK,QAEfL,EAAatB,KACZ,IAEHuB,qBAAU,WAERV,QAAQC,IAAI,uBACZ,IAAMgB,EAAiBF,KAAKG,UAAUV,GACtCI,aAAaO,QAAQ,WAAYF,KAChC,CAACT,IAWJR,QAAQC,IAAI,eACZD,QAAQC,IAAIO,GAEZ,IAAMY,EAAiB,SAACC,GACtBrB,QAAQC,IAAI,qCACZD,QAAQC,IAAIoB,GAGZ,IAAMC,EAAad,EAAUe,KAAI,SAACC,GAChC,OAAIA,EAASpC,MAAQiC,EAAYjC,IACxBiC,EAEFG,KAETf,EAAaa,IAGf,OACE,sBAAK5B,UAAU,MAAf,UACE,oDACA,qBAAKA,UAAU,aAAf,SACKc,EAAUe,KAAI,SAACC,EAAUC,GACtB,OACE,cAAC,EAAD,CAAMjC,KAAMgC,EAAU/B,aAAc2B,GAAqBK,YC7C1DC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.1a163863.chunk.js","sourcesContent":["import INote from \"./interfaces/note.interface\";\r\n\r\nconst DUMMY_NOTES: INote[] = [\r\n  { _id: '1',text: \"Ahsan's Twitch\", link: \"https://twitch.tv/codewithahsan\" },\r\n  { _id: '2',text: \"Get a job\", link: \"https://rozee.pk\" },\r\n  { _id: '3',text: \"Ahsan's Twitch\", link: \"https://twitch.tv/codewithahsan\" },\r\n  { _id: '4',text: \"Get a job\", link: \"https://rozee.pk\" },\r\n  { _id: '5',text: \"Ahsan's Twitch\", link: \"https://twitch.tv/codewithahsan\" },\r\n  { _id: '6',text: \"Get a job\", link: \"https://rozee.pk\" },\r\n  { _id: '7',text: \"Ahsan's Twitch\", link: \"https://twitch.tv/codewithahsan\" },\r\n  { _id: '8',text: \"Get a job\", link: \"https://rozee.pk\" },\r\n  { _id: '9',text: \"Ahsan's Twitch\", link: \"https://twitch.tv/codewithahsan\" },\r\n  { _id: '10',text: \"Get a job\", link: \"https://rozee.pk\" },\r\n];\r\n\r\nexport default DUMMY_NOTES;","import { FC, FocusEvent } from \"react\";\r\nimport INote from \"../../interfaces/note.interface\";\r\nimport \"./Note.css\";\r\n\r\ntype Props = {\r\n    note: INote;\r\n    onNoteUpdate: (note: INote) => void;\r\n};\r\n\r\nconst Note: FC<Props> = ({ note, onNoteUpdate }) => {\r\n\r\n  const noteTextUpdated = (event: FocusEvent<HTMLDivElement>) => {\r\n    const newTextValue = event.currentTarget.textContent;\r\n    if (newTextValue === note.text) {\r\n      return;\r\n    }\r\n    console.log(\"note text changed\");\r\n    const updatedNoteObject: INote = {\r\n      ...note,\r\n      text: newTextValue || \"\",\r\n    };\r\n    onNoteUpdate(updatedNoteObject);\r\n  };\r\n\r\n  return (\r\n    <div className=\"note\">\r\n        <div\r\n        onBlur={noteTextUpdated} \r\n        contentEditable={true} \r\n        suppressContentEditableWarning={true} \r\n        className=\"note__text\"\r\n      > \r\n        {note.text}\r\n      </div>\r\n      <div className=\"note__link\">\r\n            <a href={note.link}>{note.link}</a>\r\n        </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Note;","import \"./App.css\";\n// import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport DUMMY_NOTES from './DUMMY_NOTES';\nimport Note from './components/Note/Note';\nimport INote from \"./interfaces/note.interface\";\n\nfunction App() {\n  const [notesList, setNotesList] = useState<Array<any>>([]);\n\n  // App componenets renders the first time\n  useEffect(() => {\n    const listFromStorageString = localStorage.getItem(\"my-note\");\n    if (listFromStorageString) {\n      const listFromStorageArray = JSON.parse(listFromStorageString);\n      setNotesList(listFromStorageArray);\n    } else\n    setNotesList(DUMMY_NOTES);\n  }, []);\n\n  useEffect(() => {\n\n    console.log(\"saving localStorage\");\n    const notesListString =JSON.stringify(notesList);\n    localStorage.setItem(\"my-notes\", notesListString);\n  }, [notesList]);\n\n  // get notes method\n  // async function getNotes() {\n  // try {\n  //    const response = await axios.get(\"http://localhost:5000/notes\");\n  //    setNotesList(response.data.notes);\n  //  } catch (error){\n  //    console.error(error);\n  //  }\n  // }\n  console.log(\"rerendering\")\n  console.log(notesList);\n\n  const updateNoteItem = (updatedNote:  INote) => {\n    console.log(\"alue updated in the app component\");\n    console.log(updatedNote);\n\n    // temporary variable\n    const updateList = notesList.map((noteItem: INote) => {\n      if (noteItem._id === updatedNote._id) {\n        return updatedNote;\n      }\n      return noteItem;\n    });\n    setNotesList(updateList); //updating the state of notes list\n  };\n\n  return (\n    <div className=\"App\">\n      <div>Notes Application</div>\n      <div className=\"notes-list\">\n          {notesList.map((noteItem, index) => {\n              return (\n                <Note note={noteItem} onNoteUpdate={updateNoteItem} key={index} />\n             );  \n          })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}